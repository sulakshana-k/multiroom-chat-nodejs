1. // server side logic
	// 'socket.io' logic will be in /lib. 
	mkdir lib 

2. // client side webbrowser files
	mkdir public

3. // create subdirectories:
	mkdir public/javascripts

4. mkdir public/stylesheets

5. `npm install` reads 'package.json' and installs whatever 'dependencies' we 
	specify in that.
	Therefore before we run `npm install` it is necessary to create 'package.json' 
	as follows:

	Create a file called package.json in the main dir and store this in it.
	{
		"name": "chatrooms",
		"version": "0.0.1",
		"description": "Minimalist multiroom chat server",
		"dependencies": {
					"socket.io": "~0.9.6",
					"mime": "~1.2.7"
				}
	}

6. create file 'server.js' in the main dir.

7. Websockets:
		Websockets use TCP/IP communication protocol which interacts between browsers
		and server. Websockets are built on top of normal TCP/IP sockets.
		
		There are more important differences on the receiving side of things. 
		When the receiver does a recv (or read) on a TCP socket, there is no guarantee 
		that the number of bytes returned corresponds to a single send (or write) on the 
		sender side. It might be the same, it may be less (or zero) and it might even be 
		more (in which case bytes from multiple send/writes are received). 
		With WebSockets, the recipient of a message is event-driven (you generally register 
		a message handler routine), and the data in the event is always the entire message 
		that the other side sent.

		https://stackoverflow.com/a/16947118

		'socket.io' is a wraper around WebSockets


8. socket.io:
		'socket.io' provides virtual channels to which users can subscribe. This way each 
		message won't have to be sent to all the users.

		'socket.io' has event emitters.	

9. "nodejs server" vs "http server" vs "socket.io server"

HTTP:
	'http' server is unidirectional. This means that client sends the request to the 
	server and the server responds. Then the conection closes by itself. 
	
	Each http request from client to server establishes a new connection.
	Http is stateless protocol. This means each time a connection forms, it doesn't
	remember what happened previously.

	Http runs on top of TCP which is a connection oriented protocol.
	REST API like GET, POST are related to HTTP.

	Http 1.1 is a full duplex connection protocol. This means that data can be transmitted
	in both direction at the same time. Server or client don't have to wait for the other
	to complete what the other is saying.

	Example of a half-duplex system is a 'walkie-talkie'. Here you have to push a button 
	to be able to speak. When we speak we can't hear. Then we push the button only for
	hearing and can't speak.
	_______________________________________________________________________________

	'socket.io' falls under websocket category. 
	Websocket is a full-duplex protocol. It is a stateful protocol. Once extablished it 
	remains alive till the either party closes it and then the connection is terminated
	from both ends.

	Websockets should be used when the client needs to show the updated data consistantly.
	Example: Games, Chat.

	Http connections are slower than websockets because a TCP connection with handshake 
	has to be established every time a client sends a request to the server.


Advantages of Websockets over HTTP:
	1. With websockets whenever the server has got some important event related to the 
		browser, it can emit it and it will be received by the browser.
		This technique is not possible with the HTTP since the connection gets terminated
		after one response by the server is sent.

	2. With HTTP, communication will be slow since connection has to be established every
		time the browser wants something from the server.
		With websockets, once the connection is established it remains intact till it is 
		purposefully ended by the either party.

	3. With HTTP there will be a lot of overhead per message as compared to the websockets.
		Everytime a connection is formed, the header field is filled with cookies and meta
		information for each request.

		Whereas for websockets, the header information is sent once, and then we send normal
		messages on an already established connection. So, those heavy headers do not have
		to be sent repeatedly.




10. 'chat_server.js' contains slots which listen to room changes, name changes, and new messages,
	and it broadcasts these information to other users and rooms.
11. 'chat_ui.js' contains JQuery for controlling HTML(DOM) code of 'index.html'.
12. 'chat.js' contains functions for changing usernames and roomnames.
	It emits signals for room change, name change, and messages.

13. Currently(22 Feb 2021 Mon) when a user refreshes the browser's page, the nodejs chat server
	thinks that a new person has joined the chat room.
	This is the time when in 'chat_server.js', 'io.sockets.on' connection callback is called in
	function 'exports.listen'.

	In this function for the first time, guest name is assigned, user is placed in lobby, and
	message is broadcasted.

	When the guest is given a name, 'nameResult' event/signal is emitted which is received
	by 'chat_ui.js' JQuery which actually appends the message in HTML(DOM).
	Similarily all events pertaining to a new person (signalled by browser refresh) are emitted
	by 'char_server.js' and received by 'chat_ui.js' JQuery which deals with html. 

14. 'server.js' ---> 'http'
	'chat_server.js' ---> 'socket.io' is piggybanking on server.js 'http' server.
	'chat_ui.js' ---> 'socket = io.connect' is passing socket to 'chat.js'. 



